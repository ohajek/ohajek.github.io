<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on Cupr stranka</title>
    <link>http://example.org/categories/code/</link>
    <description>Recent content in Code on Cupr stranka</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Feb 2018 07:00:00 -0600</lastBuildDate>
    
	<atom:link href="http://example.org/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Criterion.rs v0.2 - HTML, Throughput Measurements, API Changes</title>
      <link>http://example.org/posts/my-first-post/</link>
      <pubDate>Mon, 05 Feb 2018 07:00:00 -0600</pubDate>
      
      <guid>http://example.org/posts/my-first-post/</guid>
      <description>I&amp;rsquo;m pleased to announce the release of Criterion.rs v0.2, available today. Version 0.2 provides a number of new features including HTML reports and throughput measurements, fixes a handful of bugs, and adds a new, more powerful way to configure and construct your benchmarks. It also breaks backwards compatibility with the 0.1 versions in a number of small but important ways. Read on to learn more!
What is Criterion.rs? Criterion.rs is a statistics-driven benchmarking library for Rust.</description>
    </item>
    
    <item>
      <title>Test post</title>
      <link>http://example.org/posts/second_post/</link>
      <pubDate>Mon, 05 Feb 2018 07:00:00 -0600</pubDate>
      
      <guid>http://example.org/posts/second_post/</guid>
      <description>#Software security #Ondrej Hajek
##Excercise 1
Dump of assembler code for function main: 0x0804840f &amp;lt;+0&amp;gt;:	lea 0x4(%esp),%ecx 0x08048413 &amp;lt;+4&amp;gt;:	and $0xfffffff0,%esp 0x08048416 &amp;lt;+7&amp;gt;:	pushl -0x4(%ecx) 0x08048419 &amp;lt;+10&amp;gt;:	push %ebp 0x0804841a &amp;lt;+11&amp;gt;:	mov %esp,%ebp 0x0804841c &amp;lt;+13&amp;gt;:	push %ecx 0x0804841d &amp;lt;+14&amp;gt;:	sub $0x4,%esp 0x08048420 &amp;lt;+17&amp;gt;:	push $0x2 0x08048422 &amp;lt;+19&amp;gt;:	push $0x1 0x08048424 &amp;lt;+21&amp;gt;:	call 0x8048406 &amp;lt;function1&amp;gt; 0x08048429 &amp;lt;+26&amp;gt;:	add $0x8,%esp 0x0804842c &amp;lt;+29&amp;gt;:	sub $0xc,%esp 0x0804842f &amp;lt;+32&amp;gt;:	push $0x80484d0 0x08048434 &amp;lt;+37&amp;gt;:	call 0x80482e0 &amp;lt;puts@plt&amp;gt; 0x08048439 &amp;lt;+42&amp;gt;:	add $0x10,%esp 0x0804843c &amp;lt;+45&amp;gt;:	mov $0x0,%eax 0x08048441 &amp;lt;+50&amp;gt;:	mov -0x4(%ebp),%ecx 0x08048444 &amp;lt;+53&amp;gt;:	leave 0x08048445 &amp;lt;+54&amp;gt;:	lea -0x4(%ecx),%esp 0x08048448 &amp;lt;+57&amp;gt;:	ret End of assembler dump.</description>
    </item>
    
  </channel>
</rss>